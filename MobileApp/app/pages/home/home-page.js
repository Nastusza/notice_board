"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var app_settings_service_1 = require("~/services/app-settings-service");
var navigation_service_1 = require("~/services/navigation-service");
var offers_service_1 = require("~/services/offers-service");
var dialogs = require("tns-core-modules/ui/dialogs");
var HomeViewModel = require("./home-view-model");
var page = null;
var vm = new HomeViewModel();
function onPageLoaded(args) {
    page = args.object;
    page.bindingContext = vm;
    // init();
}
exports.onPageLoaded = onPageLoaded;
function onTap(args) {
    init();
}
exports.onTap = onTap;
function saveSetting(args) {
    app_settings_service_1.default.Value1 = 'test';
}
exports.saveSetting = saveSetting;
function readSetting(args) {
    var testSet = app_settings_service_1.default.Value1;
    dialogs.alert(testSet);
}
exports.readSetting = readSetting;
function toUserProfile(args) {
    navigation_service_1.default.ToUserProfile();
}
exports.toUserProfile = toUserProfile;
function toMap(args) {
    navigation_service_1.default.ToMap();
}
exports.toMap = toMap;
function init() {
    vm.fetching = true;
    new offers_service_1.OffersService().loadOffers()
        .then(function (result) {
        vm.message = 'Fetch Completed Succesfully!';
        vm.offers = result;
        vm.fetching = false;
    }, function (error) {
        vm.message = error.message;
        vm.fetching = false;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9tZS1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9tZS1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsd0VBQXVEO0FBQ3ZELG9FQUE4RDtBQUM5RCw0REFBMEQ7QUFHMUQsSUFBSSxPQUFPLEdBQUcsT0FBTyxDQUFDLDZCQUE2QixDQUFDLENBQUM7QUFDckQsSUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFbkQsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDO0FBQ3RCLElBQUksRUFBRSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7QUFFN0IsU0FBZ0IsWUFBWSxDQUFDLElBQWU7SUFDeEMsSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7SUFDekIsVUFBVTtBQUNkLENBQUM7QUFKRCxvQ0FJQztBQUVELFNBQWdCLEtBQUssQ0FBQyxJQUFlO0lBQ2pDLElBQUksRUFBRSxDQUFDO0FBQ1gsQ0FBQztBQUZELHNCQUVDO0FBRUQsU0FBZ0IsV0FBVyxDQUFDLElBQWU7SUFDdkMsOEJBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQzdCLENBQUM7QUFGRCxrQ0FFQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxJQUFlO0lBQ3ZDLElBQUksT0FBTyxHQUFHLDhCQUFRLENBQUMsTUFBTSxDQUFDO0lBQzlCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUhELGtDQUdDO0FBRUQsU0FBZ0IsYUFBYSxDQUFDLElBQWU7SUFDekMsNEJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDdEMsQ0FBQztBQUZELHNDQUVDO0FBRUQsU0FBZ0IsS0FBSyxDQUFDLElBQWU7SUFDakMsNEJBQWlCLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUZELHNCQUVDO0FBRUQsU0FBUyxJQUFJO0lBQ1QsRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDbkIsSUFBSSw4QkFBYSxFQUFFLENBQUMsVUFBVSxFQUFFO1NBQzNCLElBQUksQ0FDRCxVQUFDLE1BQW9CO1FBQ2pCLEVBQUUsQ0FBQyxPQUFPLEdBQUcsOEJBQThCLENBQUM7UUFDNUMsRUFBRSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDbkIsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQyxFQUNELFVBQUMsS0FBSztRQUNGLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUMzQixFQUFFLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDLENBQUMsQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy91aS9wYWdlL3BhZ2UnO1xuaW1wb3J0IFNldHRpbmdzIGZyb20gJ34vc2VydmljZXMvYXBwLXNldHRpbmdzLXNlcnZpY2UnO1xuaW1wb3J0IE5hdmlnYXRpb25TZXJ2aWNlIGZyb20gJ34vc2VydmljZXMvbmF2aWdhdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IE9mZmVyc1NlcnZpY2UgfSBmcm9tICd+L3NlcnZpY2VzL29mZmVycy1zZXJ2aWNlJztcbmltcG9ydCB7IE9mZmVyIH0gZnJvbSAnfi9zaGFyZWQvaW50ZXJmYWNlcyc7XG5cbnZhciBkaWFsb2dzID0gcmVxdWlyZShcInRucy1jb3JlLW1vZHVsZXMvdWkvZGlhbG9nc1wiKTtcbmNvbnN0IEhvbWVWaWV3TW9kZWwgPSByZXF1aXJlKFwiLi9ob21lLXZpZXctbW9kZWxcIik7XG5cbmxldCBwYWdlOiBQYWdlID0gbnVsbDtcbmxldCB2bSA9IG5ldyBIb21lVmlld01vZGVsKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBvblBhZ2VMb2FkZWQoYXJnczogRXZlbnREYXRhKSB7XG4gICAgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbiAgICAvLyBpbml0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblRhcChhcmdzOiBFdmVudERhdGEpIHtcbiAgICBpbml0KCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYXZlU2V0dGluZyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICBTZXR0aW5ncy5WYWx1ZTEgPSAndGVzdCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkU2V0dGluZyhhcmdzOiBFdmVudERhdGEpIHtcbiAgICBsZXQgdGVzdFNldCA9IFNldHRpbmdzLlZhbHVlMTtcbiAgICBkaWFsb2dzLmFsZXJ0KHRlc3RTZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Vc2VyUHJvZmlsZShhcmdzOiBFdmVudERhdGEpIHtcbiAgICBOYXZpZ2F0aW9uU2VydmljZS5Ub1VzZXJQcm9maWxlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b01hcChhcmdzOiBFdmVudERhdGEpIHtcbiAgICBOYXZpZ2F0aW9uU2VydmljZS5Ub01hcCgpO1xufVxuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHZtLmZldGNoaW5nID0gdHJ1ZTtcbiAgICBuZXcgT2ZmZXJzU2VydmljZSgpLmxvYWRPZmZlcnMoKVxuICAgICAgICAudGhlbihcbiAgICAgICAgICAgIChyZXN1bHQ6IEFycmF5PE9mZmVyPikgPT4ge1xuICAgICAgICAgICAgICAgIHZtLm1lc3NhZ2UgPSAnRmV0Y2ggQ29tcGxldGVkIFN1Y2Nlc2Z1bGx5ISc7XG4gICAgICAgICAgICAgICAgdm0ub2ZmZXJzID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgIHZtLmZldGNoaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdm0ubWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgdm0uZmV0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xufVxuIl19