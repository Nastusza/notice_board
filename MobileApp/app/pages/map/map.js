"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var image_1 = require("tns-core-modules/ui/image");
var navigation_service_1 = require("~/services/navigation-service");
var offers_service_1 = require("~/services/offers-service");
var imageSource = require("image-source");
var ViewModel = require("./map-module");
var page = null;
var vm = new ViewModel();
function onNavigatingTo(args) {
    page = args.object;
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function navigateHome(args) {
    navigation_service_1.default.ToHome();
}
exports.navigateHome = navigateHome;
function onMapReady(args) {
    var mapView = args.object;
    init(mapView);
}
exports.onMapReady = onMapReady;
function init(mapView) {
    vm.fetching = true;
    new offers_service_1.OffersService().loadOffers()
        .then(function (result) {
        result.forEach(function (r) { return placeMarker(r, mapView); });
        vm.fetching = false;
    }, function (error) {
        vm.fetching = false;
    });
}
function placeMarker(offer, mapView) {
    var marker = new nativescript_google_maps_sdk_1.Marker();
    marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(offer.location.lat, offer.location.lng);
    marker.title = offer.title;
    marker.snippet = offer.description;
    // marker.userData = { index : 1};
    var icon = new image_1.Image();
    icon.imageSource = imageSource.fromResource('marker');
    marker.icon = icon;
    mapView.addMarker(marker);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkVBQXlFO0FBQ3pFLG1EQUFrRDtBQUVsRCxvRUFBOEQ7QUFDOUQsNERBQTBEO0FBRzFELElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBRSxjQUFjLENBQUUsQ0FBQztBQUM1QyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFMUMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDO0FBQ3RCLElBQUksRUFBRSxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7QUFFekIsU0FBZ0IsY0FBYyxDQUFDLElBQW1CO0lBQzlDLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFIRCx3Q0FHQztBQUVELFNBQWdCLFlBQVksQ0FBQyxJQUFlO0lBQ3hDLDRCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFGRCxvQ0FFQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxJQUFlO0lBQ3RDLElBQUksT0FBTyxHQUFZLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xCLENBQUM7QUFIRCxnQ0FHQztBQUVELFNBQVMsSUFBSSxDQUFDLE9BQWdCO0lBQzFCLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ25CLElBQUksOEJBQWEsRUFBRSxDQUFDLFVBQVUsRUFBRTtTQUMzQixJQUFJLENBQ0QsVUFBQyxNQUFvQjtRQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsV0FBVyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFBO1FBQzVDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUMsRUFDRCxVQUFDLEtBQUs7UUFDRixFQUFFLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDLENBQUMsQ0FBQztBQUNmLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxLQUFZLEVBQUUsT0FBZ0I7SUFDL0MsSUFBSSxNQUFNLEdBQUcsSUFBSSxxQ0FBTSxFQUFFLENBQUM7SUFDMUIsTUFBTSxDQUFDLFFBQVEsR0FBRyx1Q0FBUSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEYsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQzNCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUNuQyxrQ0FBa0M7SUFFbEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxhQUFLLEVBQUUsQ0FBQztJQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEQsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFwVmlldywgTWFya2VyLCBQb3NpdGlvbiB9IGZyb20gJ25hdGl2ZXNjcmlwdC1nb29nbGUtbWFwcy1zZGsnO1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlJztcbmltcG9ydCB7IEV2ZW50RGF0YSwgTmF2aWdhdGVkRGF0YSwgUGFnZSB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGFnZS9wYWdlJztcbmltcG9ydCBOYXZpZ2F0aW9uU2VydmljZSBmcm9tICd+L3NlcnZpY2VzL25hdmlnYXRpb24tc2VydmljZSc7XG5pbXBvcnQgeyBPZmZlcnNTZXJ2aWNlIH0gZnJvbSAnfi9zZXJ2aWNlcy9vZmZlcnMtc2VydmljZSc7XG5pbXBvcnQgeyBPZmZlciB9IGZyb20gJ34vc2hhcmVkL2ludGVyZmFjZXMnO1xuXG52YXIgaW1hZ2VTb3VyY2UgPSByZXF1aXJlKCBcImltYWdlLXNvdXJjZVwiICk7XG5jb25zdCBWaWV3TW9kZWwgPSByZXF1aXJlKFwiLi9tYXAtbW9kdWxlXCIpO1xuXG5sZXQgcGFnZTogUGFnZSA9IG51bGw7XG5sZXQgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzOiBOYXZpZ2F0ZWREYXRhKSB7XG4gICAgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRlSG9tZShhcmdzOiBFdmVudERhdGEpIHtcbiAgICBOYXZpZ2F0aW9uU2VydmljZS5Ub0hvbWUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTWFwUmVhZHkoYXJnczogRXZlbnREYXRhKSB7XG4gICAgdmFyIG1hcFZpZXcgPSA8TWFwVmlldz5hcmdzLm9iamVjdDtcbiAgICBpbml0KG1hcFZpZXcpO1xufVxuXG5mdW5jdGlvbiBpbml0KG1hcFZpZXc6IE1hcFZpZXcpIHtcbiAgICB2bS5mZXRjaGluZyA9IHRydWU7XG4gICAgbmV3IE9mZmVyc1NlcnZpY2UoKS5sb2FkT2ZmZXJzKClcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0OiBBcnJheTxPZmZlcj4pID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZm9yRWFjaChyID0+IHBsYWNlTWFya2VyKHIsIG1hcFZpZXcpKVxuICAgICAgICAgICAgICAgIHZtLmZldGNoaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdm0uZmV0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xufVxuXG5mdW5jdGlvbiBwbGFjZU1hcmtlcihvZmZlcjogT2ZmZXIsIG1hcFZpZXc6IE1hcFZpZXcpIHtcbiAgICB2YXIgbWFya2VyID0gbmV3IE1hcmtlcigpO1xuICAgIG1hcmtlci5wb3NpdGlvbiA9IFBvc2l0aW9uLnBvc2l0aW9uRnJvbUxhdExuZyhvZmZlci5sb2NhdGlvbi5sYXQsIG9mZmVyLmxvY2F0aW9uLmxuZyk7XG4gICAgbWFya2VyLnRpdGxlID0gb2ZmZXIudGl0bGU7XG4gICAgbWFya2VyLnNuaXBwZXQgPSBvZmZlci5kZXNjcmlwdGlvbjtcbiAgICAvLyBtYXJrZXIudXNlckRhdGEgPSB7IGluZGV4IDogMX07XG5cbiAgICBsZXQgaWNvbiA9IG5ldyBJbWFnZSgpO1xuICAgIGljb24uaW1hZ2VTb3VyY2UgPSBpbWFnZVNvdXJjZS5mcm9tUmVzb3VyY2UoJ21hcmtlcicpO1xuICAgIG1hcmtlci5pY29uID0gaWNvbjtcblxuICAgIG1hcFZpZXcuYWRkTWFya2VyKG1hcmtlcik7XG59XG5cbiJdfQ==