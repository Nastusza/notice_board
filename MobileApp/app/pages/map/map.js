"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var navigation_service_1 = require("~/services/navigation-service");
var offers_service_1 = require("~/services/offers-service");
var geolocation_service_1 = require("~/services/geolocation-service");
var marker_custom_1 = require("./components/marker-custom");
var ViewModel = require("./map-module");
var vm = new ViewModel();
function onNavigatingTo(args) {
    var page = args.object;
    page.bindingContext = vm;
    geolocation_service_1.enableLocation();
}
exports.onNavigatingTo = onNavigatingTo;
function navigateHome(args) {
    navigation_service_1.default.ToHome();
}
exports.navigateHome = navigateHome;
function onMapReady(args) {
    var mapView = args.object;
}
exports.onMapReady = onMapReady;
function onMarkerSelect(args) {
    var marker = args.marker;
    var map = args.object;
}
exports.onMarkerSelect = onMarkerSelect;
function onCameraChanged(args) {
    var camera = args.camera;
    var map = args.object;
    var latMin = map.projection.visibleRegion.bounds.southwest.latitude;
    var latMax = map.projection.visibleRegion.bounds.northeast.latitude;
    var lngMin = map.projection.visibleRegion.bounds.southwest.longitude;
    var lngMax = map.projection.visibleRegion.bounds.northeast.longitude;
    vm.fetching = true;
    map.removeAllMarkers();
    new offers_service_1.OffersService().loadOffers(latMin, latMax, lngMin, lngMax)
        .then(function (result) {
        result.forEach(function (r) { return placeMarker(r, map); });
        vm.fetching = false;
    }, function (error) {
        vm.fetching = false;
    });
}
exports.onCameraChanged = onCameraChanged;
function placeMarker(offer, mapView) {
    var marker = new marker_custom_1.MarkerCustom();
    marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(offer.location.lat, offer.location.lng);
    marker.title = offer.title;
    marker.snippet = offer.description;
    // marker.userData = { index : 1};
    mapView.addMarker(marker);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkVBQW1IO0FBRW5ILG9FQUE4RDtBQUM5RCw0REFBMEQ7QUFFMUQsc0VBQWdFO0FBQ2hFLDREQUEwRDtBQUUxRCxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFMUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztBQUV6QixTQUFnQixjQUFjLENBQUMsSUFBbUI7SUFDOUMsSUFBTSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUMvQixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztJQUV6QixvQ0FBYyxFQUFFLENBQUM7QUFDckIsQ0FBQztBQUxELHdDQUtDO0FBRUQsU0FBZ0IsWUFBWSxDQUFDLElBQWU7SUFDeEMsNEJBQWlCLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDL0IsQ0FBQztBQUZELG9DQUVDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLElBQWU7SUFDdEMsSUFBSSxPQUFPLEdBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QyxDQUFDO0FBRkQsZ0NBRUM7QUFFRCxTQUFnQixjQUFjLENBQUMsSUFBcUI7SUFDaEQsSUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxJQUFNLEdBQUcsR0FBWSxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3JDLENBQUM7QUFIRCx3Q0FHQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxJQUFxQjtJQUNqRCxJQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ25DLElBQU0sR0FBRyxHQUFZLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFakMsSUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDdEUsSUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDdEUsSUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDdkUsSUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFFdkUsRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDbkIsR0FBRyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFFdkIsSUFBSSw4QkFBYSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQztTQUN6RCxJQUFJLENBQ0QsVUFBQyxNQUFvQjtRQUNqQixNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsV0FBVyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBbkIsQ0FBbUIsQ0FBQyxDQUFBO1FBQ3hDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUMsRUFDRCxVQUFDLEtBQUs7UUFDRixFQUFFLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDLENBQUMsQ0FBQztBQUNmLENBQUM7QUFyQkQsMENBcUJDO0FBRUQsU0FBUyxXQUFXLENBQUMsS0FBWSxFQUFFLE9BQWdCO0lBQy9DLElBQUksTUFBTSxHQUFHLElBQUksNEJBQVksRUFBRSxDQUFDO0lBQ2hDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsdUNBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUMzQixNQUFNLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDbkMsa0NBQWtDO0lBRWxDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbWVyYSwgQ2FtZXJhRXZlbnREYXRhLCBNYXBWaWV3LCBNYXJrZXIsIE1hcmtlckV2ZW50RGF0YSwgUG9zaXRpb24gfSBmcm9tICduYXRpdmVzY3JpcHQtZ29vZ2xlLW1hcHMtc2RrJztcbmltcG9ydCB7IEV2ZW50RGF0YSwgTmF2aWdhdGVkRGF0YSwgUGFnZSB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGFnZS9wYWdlJztcbmltcG9ydCBOYXZpZ2F0aW9uU2VydmljZSBmcm9tICd+L3NlcnZpY2VzL25hdmlnYXRpb24tc2VydmljZSc7XG5pbXBvcnQgeyBPZmZlcnNTZXJ2aWNlIH0gZnJvbSAnfi9zZXJ2aWNlcy9vZmZlcnMtc2VydmljZSc7XG5pbXBvcnQgeyBPZmZlciB9IGZyb20gJ34vc2hhcmVkL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgZW5hYmxlTG9jYXRpb24gfSBmcm9tICd+L3NlcnZpY2VzL2dlb2xvY2F0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgTWFya2VyQ3VzdG9tIH0gZnJvbSAnLi9jb21wb25lbnRzL21hcmtlci1jdXN0b20nO1xuXG5jb25zdCBWaWV3TW9kZWwgPSByZXF1aXJlKFwiLi9tYXAtbW9kdWxlXCIpO1xuXG5sZXQgdm0gPSBuZXcgVmlld01vZGVsKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk5hdmlnYXRpbmdUbyhhcmdzOiBOYXZpZ2F0ZWREYXRhKSB7XG4gICAgY29uc3QgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcblxuICAgIGVuYWJsZUxvY2F0aW9uKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZUhvbWUoYXJnczogRXZlbnREYXRhKSB7XG4gICAgTmF2aWdhdGlvblNlcnZpY2UuVG9Ib21lKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk1hcFJlYWR5KGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHZhciBtYXBWaWV3ID0gPE1hcFZpZXc+YXJncy5vYmplY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk1hcmtlclNlbGVjdChhcmdzOiBNYXJrZXJFdmVudERhdGEpIHtcbiAgICBjb25zdCBtYXJrZXIgPSA8TWFya2VyPmFyZ3MubWFya2VyO1xuICAgIGNvbnN0IG1hcCA9IDxNYXBWaWV3PmFyZ3Mub2JqZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25DYW1lcmFDaGFuZ2VkKGFyZ3M6IENhbWVyYUV2ZW50RGF0YSkge1xuICAgIGNvbnN0IGNhbWVyYSA9IDxDYW1lcmE+YXJncy5jYW1lcmE7XG4gICAgY29uc3QgbWFwID0gPE1hcFZpZXc+YXJncy5vYmplY3Q7XG5cbiAgICBjb25zdCBsYXRNaW4gPSBtYXAucHJvamVjdGlvbi52aXNpYmxlUmVnaW9uLmJvdW5kcy5zb3V0aHdlc3QubGF0aXR1ZGU7XG4gICAgY29uc3QgbGF0TWF4ID0gbWFwLnByb2plY3Rpb24udmlzaWJsZVJlZ2lvbi5ib3VuZHMubm9ydGhlYXN0LmxhdGl0dWRlO1xuICAgIGNvbnN0IGxuZ01pbiA9IG1hcC5wcm9qZWN0aW9uLnZpc2libGVSZWdpb24uYm91bmRzLnNvdXRod2VzdC5sb25naXR1ZGU7XG4gICAgY29uc3QgbG5nTWF4ID0gbWFwLnByb2plY3Rpb24udmlzaWJsZVJlZ2lvbi5ib3VuZHMubm9ydGhlYXN0LmxvbmdpdHVkZTtcblxuICAgIHZtLmZldGNoaW5nID0gdHJ1ZTtcbiAgICBtYXAucmVtb3ZlQWxsTWFya2VycygpO1xuXG4gICAgbmV3IE9mZmVyc1NlcnZpY2UoKS5sb2FkT2ZmZXJzKGxhdE1pbiwgbGF0TWF4LCBsbmdNaW4sIGxuZ01heClcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0OiBBcnJheTxPZmZlcj4pID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZm9yRWFjaChyID0+IHBsYWNlTWFya2VyKHIsIG1hcCkpXG4gICAgICAgICAgICAgICAgdm0uZmV0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB2bS5mZXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIHBsYWNlTWFya2VyKG9mZmVyOiBPZmZlciwgbWFwVmlldzogTWFwVmlldykge1xuICAgIHZhciBtYXJrZXIgPSBuZXcgTWFya2VyQ3VzdG9tKCk7XG4gICAgbWFya2VyLnBvc2l0aW9uID0gUG9zaXRpb24ucG9zaXRpb25Gcm9tTGF0TG5nKG9mZmVyLmxvY2F0aW9uLmxhdCwgb2ZmZXIubG9jYXRpb24ubG5nKTtcbiAgICBtYXJrZXIudGl0bGUgPSBvZmZlci50aXRsZTtcbiAgICBtYXJrZXIuc25pcHBldCA9IG9mZmVyLmRlc2NyaXB0aW9uO1xuICAgIC8vIG1hcmtlci51c2VyRGF0YSA9IHsgaW5kZXggOiAxfTtcblxuICAgIG1hcFZpZXcuYWRkTWFya2VyKG1hcmtlcik7XG59XG5cbiJdfQ==