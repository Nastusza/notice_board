"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nativescript_google_maps_sdk_1 = require("nativescript-google-maps-sdk");
var navigation_service_1 = require("~/services/navigation-service");
var offers_service_1 = require("~/services/offers-service");
var marker_custom_1 = require("./components/marker-custom");
var ViewModel = require("./map-module");
var vm = new ViewModel();
function onNavigatingTo(args) {
    var page = args.object;
    page.bindingContext = vm;
}
exports.onNavigatingTo = onNavigatingTo;
function navigateHome(args) {
    navigation_service_1.default.ToHome();
}
exports.navigateHome = navigateHome;
function onMapReady(args) {
    var mapView = args.object;
}
exports.onMapReady = onMapReady;
function onMarkerSelect(args) {
    var marker = args.marker;
    var map = args.object;
}
exports.onMarkerSelect = onMarkerSelect;
function onCameraChanged(args) {
    var camera = args.camera;
    var map = args.object;
    var latMin = map.projection.visibleRegion.bounds.southwest.latitude;
    var latMax = map.projection.visibleRegion.bounds.northeast.latitude;
    var lngMin = map.projection.visibleRegion.bounds.southwest.longitude;
    var lngMax = map.projection.visibleRegion.bounds.northeast.longitude;
    vm.fetching = true;
    map.removeAllMarkers();
    new offers_service_1.OffersService().loadOffers(latMin, latMax, lngMin, lngMax)
        .then(function (result) {
        result.forEach(function (r) { return placeMarker(r, map); });
        vm.fetching = false;
    }, function (error) {
        vm.fetching = false;
    });
}
exports.onCameraChanged = onCameraChanged;
function placeMarker(offer, mapView) {
    var marker = new marker_custom_1.MarkerCustom();
    marker.position = nativescript_google_maps_sdk_1.Position.positionFromLatLng(offer.location.lat, offer.location.lng);
    marker.title = offer.title;
    marker.snippet = offer.description;
    // marker.userData = { index : 1};
    mapView.addMarker(marker);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkVBQW1IO0FBRW5ILG9FQUE4RDtBQUM5RCw0REFBMEQ7QUFFMUQsNERBQTBEO0FBRTFELElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUUxQyxJQUFJLEVBQUUsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDO0FBRXpCLFNBQWdCLGNBQWMsQ0FBQyxJQUFtQjtJQUM5QyxJQUFNLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQy9CLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFIRCx3Q0FHQztBQUVELFNBQWdCLFlBQVksQ0FBQyxJQUFlO0lBQ3hDLDRCQUFpQixDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFGRCxvQ0FFQztBQUVELFNBQWdCLFVBQVUsQ0FBQyxJQUFlO0lBQ3RDLElBQUksT0FBTyxHQUFZLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkMsQ0FBQztBQUZELGdDQUVDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLElBQXFCO0lBQ2hELElBQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDbkMsSUFBTSxHQUFHLEdBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUNyQyxDQUFDO0FBSEQsd0NBR0M7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBcUI7SUFDakQsSUFBTSxNQUFNLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNuQyxJQUFNLEdBQUcsR0FBWSxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRWpDLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ3RFLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ3RFLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBQ3ZFLElBQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBRXZFLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ25CLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRXZCLElBQUksOEJBQWEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUM7U0FDekQsSUFBSSxDQUNELFVBQUMsTUFBb0I7UUFDakIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFdBQVcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQW5CLENBQW1CLENBQUMsQ0FBQTtRQUN4QyxFQUFFLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztJQUN4QixDQUFDLEVBQ0QsVUFBQyxLQUFLO1FBQ0YsRUFBRSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQyxDQUFDLENBQUM7QUFDZixDQUFDO0FBckJELDBDQXFCQztBQUVELFNBQVMsV0FBVyxDQUFDLEtBQVksRUFBRSxPQUFnQjtJQUMvQyxJQUFJLE1BQU0sR0FBRyxJQUFJLDRCQUFZLEVBQUUsQ0FBQztJQUNoQyxNQUFNLENBQUMsUUFBUSxHQUFHLHVDQUFRLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0RixNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDM0IsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQ25DLGtDQUFrQztJQUVsQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDYW1lcmEsIENhbWVyYUV2ZW50RGF0YSwgTWFwVmlldywgTWFya2VyLCBNYXJrZXJFdmVudERhdGEsIFBvc2l0aW9uIH0gZnJvbSAnbmF0aXZlc2NyaXB0LWdvb2dsZS1tYXBzLXNkayc7XG5pbXBvcnQgeyBFdmVudERhdGEsIE5hdmlnYXRlZERhdGEsIFBhZ2UgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UvcGFnZSc7XG5pbXBvcnQgTmF2aWdhdGlvblNlcnZpY2UgZnJvbSAnfi9zZXJ2aWNlcy9uYXZpZ2F0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgT2ZmZXJzU2VydmljZSB9IGZyb20gJ34vc2VydmljZXMvb2ZmZXJzLXNlcnZpY2UnO1xuaW1wb3J0IHsgT2ZmZXIgfSBmcm9tICd+L3NoYXJlZC9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE1hcmtlckN1c3RvbSB9IGZyb20gJy4vY29tcG9uZW50cy9tYXJrZXItY3VzdG9tJztcblxuY29uc3QgVmlld01vZGVsID0gcmVxdWlyZShcIi4vbWFwLW1vZHVsZVwiKTtcblxubGV0IHZtID0gbmV3IFZpZXdNb2RlbCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gb25OYXZpZ2F0aW5nVG8oYXJnczogTmF2aWdhdGVkRGF0YSkge1xuICAgIGNvbnN0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZUhvbWUoYXJnczogRXZlbnREYXRhKSB7XG4gICAgTmF2aWdhdGlvblNlcnZpY2UuVG9Ib21lKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk1hcFJlYWR5KGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHZhciBtYXBWaWV3ID0gPE1hcFZpZXc+YXJncy5vYmplY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbk1hcmtlclNlbGVjdChhcmdzOiBNYXJrZXJFdmVudERhdGEpIHtcbiAgICBjb25zdCBtYXJrZXIgPSA8TWFya2VyPmFyZ3MubWFya2VyO1xuICAgIGNvbnN0IG1hcCA9IDxNYXBWaWV3PmFyZ3Mub2JqZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25DYW1lcmFDaGFuZ2VkKGFyZ3M6IENhbWVyYUV2ZW50RGF0YSkge1xuICAgIGNvbnN0IGNhbWVyYSA9IDxDYW1lcmE+YXJncy5jYW1lcmE7XG4gICAgY29uc3QgbWFwID0gPE1hcFZpZXc+YXJncy5vYmplY3Q7XG5cbiAgICBjb25zdCBsYXRNaW4gPSBtYXAucHJvamVjdGlvbi52aXNpYmxlUmVnaW9uLmJvdW5kcy5zb3V0aHdlc3QubGF0aXR1ZGU7XG4gICAgY29uc3QgbGF0TWF4ID0gbWFwLnByb2plY3Rpb24udmlzaWJsZVJlZ2lvbi5ib3VuZHMubm9ydGhlYXN0LmxhdGl0dWRlO1xuICAgIGNvbnN0IGxuZ01pbiA9IG1hcC5wcm9qZWN0aW9uLnZpc2libGVSZWdpb24uYm91bmRzLnNvdXRod2VzdC5sb25naXR1ZGU7XG4gICAgY29uc3QgbG5nTWF4ID0gbWFwLnByb2plY3Rpb24udmlzaWJsZVJlZ2lvbi5ib3VuZHMubm9ydGhlYXN0LmxvbmdpdHVkZTtcblxuICAgIHZtLmZldGNoaW5nID0gdHJ1ZTtcbiAgICBtYXAucmVtb3ZlQWxsTWFya2VycygpO1xuXG4gICAgbmV3IE9mZmVyc1NlcnZpY2UoKS5sb2FkT2ZmZXJzKGxhdE1pbiwgbGF0TWF4LCBsbmdNaW4sIGxuZ01heClcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0OiBBcnJheTxPZmZlcj4pID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQuZm9yRWFjaChyID0+IHBsYWNlTWFya2VyKHIsIG1hcCkpXG4gICAgICAgICAgICAgICAgdm0uZmV0Y2hpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICB2bS5mZXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG59XG5cbmZ1bmN0aW9uIHBsYWNlTWFya2VyKG9mZmVyOiBPZmZlciwgbWFwVmlldzogTWFwVmlldykge1xuICAgIHZhciBtYXJrZXIgPSBuZXcgTWFya2VyQ3VzdG9tKCk7XG4gICAgbWFya2VyLnBvc2l0aW9uID0gUG9zaXRpb24ucG9zaXRpb25Gcm9tTGF0TG5nKG9mZmVyLmxvY2F0aW9uLmxhdCwgb2ZmZXIubG9jYXRpb24ubG5nKTtcbiAgICBtYXJrZXIudGl0bGUgPSBvZmZlci50aXRsZTtcbiAgICBtYXJrZXIuc25pcHBldCA9IG9mZmVyLmRlc2NyaXB0aW9uO1xuICAgIC8vIG1hcmtlci51c2VyRGF0YSA9IHsgaW5kZXggOiAxfTtcblxuICAgIG1hcFZpZXcuYWRkTWFya2VyKG1hcmtlcik7XG59XG5cbiJdfQ==